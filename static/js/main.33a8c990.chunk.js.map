{"version":3,"sources":["redux/random-task/random-task.action.types.js","redux/random-task/random-task.actions.js","App.js","reportWebVitals.js","redux/root-reducer.js","redux/store.js","index.js","redux/random-task/random-task.utils.js","redux/random-task/random-task.reducer.js"],"names":["randomTaskActionTypes","UPDATE_TASK","TOGGLE_THEME","require","default","connect","state","tasks","randomTasks","darkTheme","dispatch","updateTasks","payload","type","toggleTheme","useState","task","setTask","gotoTopRef","useRef","body","document","addEventListener","e","current","visibility","getComputedStyle","scrollTop","style","className","id","onSubmit","preventDefault","operation","querySelector","reset","blur","height","scrollHeight","scrollTo","top","behavior","onChange","target","value","placeholder","display","onClick","map","idx","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","persistReducer","randomTaskReducer","key","storage","whitelist","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","StrictMode","getElementById","updateTodo","currentTasks","newTask","filter","INITIAL_STATE","action"],"mappings":"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","file":"static/js/main.33a8c990.chunk.js","sourcesContent":["const randomTaskActionTypes = {\n  UPDATE_TASK: \"UPDATE_TASK\",\n  TOGGLE_THEME: \"TOGGLE_THEME\",\n};\n\nexport default randomTaskActionTypes;\n","const {\n  default: randomTaskActionTypes,\n} = require(\"./random-task.action.types\");\n\nexport const updateTasks = (payload) => ({\n  type: randomTaskActionTypes.UPDATE_TASK,\n  payload,\n});\n\nexport const toggleTheme = () => ({\n  type: randomTaskActionTypes.TOGGLE_THEME,\n});\n","import { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nimport {\n  updateTasks,\n  toggleTheme,\n} from \"./redux/random-task/random-task.actions\";\n\n// ICONS\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport DeleteForeverTwoToneIcon from \"@material-ui/icons/DeleteForeverTwoTone\";\n\nfunction App({ tasks, updateTasks, darkTheme, toggleTheme }) {\n  const [task, setTask] = useState(\"\");\n  const gotoTopRef = useRef();\n\n  const body = document.body;\n\n  const VISIBLE_GOTO_TOP_AT = 100;\n\n  body.addEventListener(\"scroll\", (e) => {\n    if (gotoTopRef.current) {\n      const visibility = getComputedStyle(gotoTopRef.current)[\"visibility\"];\n      if (body.scrollTop > VISIBLE_GOTO_TOP_AT && visibility === \"hidden\") {\n        gotoTopRef.current.style.visibility = \"visible\";\n      } else if (\n        body.scrollTop < VISIBLE_GOTO_TOP_AT &&\n        visibility === \"visible\"\n      ) {\n        gotoTopRef.current.style.visibility = \"hidden\";\n      }\n    }\n  });\n  const gotoTop = () => {\n    body.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  return (\n    <div className={`app${darkTheme ? \" dark\" : \"\"}`}>\n      <header>\n        <form\n          id=\"task-inp-form\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            updateTasks({ task, operation: \"+\" });\n            document.querySelector(\"form\").reset();\n            document.querySelector(\".task-input\").blur();\n\n            // scroll to last\n            const height = body.scrollHeight;\n\n            body.scrollTo({\n              top: height + 50,\n              behavior: \"smooth\",\n            });\n          }}\n        >\n          <div className=\"inp-task\">\n            <input\n              onChange={(e) => setTask(e.target.value)}\n              type=\"input\"\n              className=\"task-input\"\n              placeholder=\"enter task\"\n            />\n            <span className=\"add-button\">\n              <AddIcon />\n            </span>\n          </div>\n          <input type=\"submit\" style={{ display: \"none\" }} />\n        </form>\n        <button className=\"theme-change-button\" onClick={toggleTheme}>\n          {darkTheme ? <WbSunnyIcon /> : <NightsStayIcon />}\n        </button>\n      </header>\n\n      <ol className=\"output-tasks\">\n        {tasks.map((task, idx) => (\n          <li className=\"task-item\" key={idx}>\n            <span className=\"s-no\">{idx + 1}.</span>\n            <div className=\"about-task\">{task}</div>\n            <div\n              className=\"delete-task-button\"\n              onClick={() => updateTasks({ task, operation: \"-\" })}\n            >\n              <DeleteForeverTwoToneIcon />\n            </div>\n          </li>\n        ))}\n      </ol>\n\n      <button ref={gotoTopRef} onClick={gotoTop} className=\"goto-top\">\n        <ArrowUpwardIcon />\n      </button>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  tasks: state.randomTasks.tasks,\n  darkTheme: state.randomTasks.darkTheme,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTasks: (payload) => dispatch(updateTasks(payload)),\n  toggleTheme: () => dispatch(toggleTheme()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import storage from \"redux-persist/lib/storage\";\n// Error\n// const storage = require(\"redux-persist/lib/storage\");\n\nconst { combineReducers } = require(\"redux\");\n\nconst { persistReducer } = require(\"redux-persist\");\n\nconst {\n  default: randomTaskReducer,\n} = require(\"./random-task/random-task.reducer\");\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"randomTasks\"],\n};\n\nconst rootReducer = combineReducers({\n  randomTasks: randomTaskReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./root-reducer\";\n\nexport const store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport const persistor = persistStore(store);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const updateTodo = (currentTasks, payload) => {\n  const { task: newTask, operation } = payload;\n  if (operation === \"+\") {\n    return [...currentTasks, newTask];\n  } else if (operation === \"-\") {\n    return currentTasks.filter((task) => task !== newTask);\n  }\n};\n","import { updateTodo } from \"./random-task.utils\";\n\nconst {\n  default: randomTaskActionTypes,\n} = require(\"./random-task.action.types\");\n\nconst INITIAL_STATE = {\n  tasks: [],\n  darkTheme: true,\n};\n\nconst randomTaskReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case randomTaskActionTypes.UPDATE_TASK:\n      return {\n        ...state,\n        tasks: updateTodo(state.tasks, action.payload),\n      };\n\n    case randomTaskActionTypes.TOGGLE_THEME:\n      return {\n        ...state,\n        darkTheme: !state.darkTheme,\n      };\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default randomTaskReducer;\n"],"sourceRoot":""}