{"version":3,"sources":["redux/random-task/random-task.action.types.js","redux/random-task/random-task.actions.js","App.js","reportWebVitals.js","redux/root-reducer.js","redux/store.js","index.js","redux/random-task/random-task.utils.js","redux/random-task/random-task.reducer.js"],"names":["randomTaskActionTypes","UPDATE_TASK","RESTORE_TODOS","TOGGLE_THEME","require","default","connect","state","tasks","randomTasks","darkTheme","dispatch","updateTasks","payload","type","restoreTodos","toggleTheme","useState","task","setTask","gotoTopRef","useRef","body","document","addEventListener","e","current","visibility","getComputedStyle","scrollTop","style","className","id","onSubmit","preventDefault","operation","querySelector","reset","blur","height","scrollHeight","scrollTo","top","behavior","onChange","target","value","placeholder","display","onClick","map","idx","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","persistReducer","randomTaskReducer","key","storage","whitelist","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","StrictMode","getElementById","manipulateTasks","currentTasks","newTask","filter","INITIAL_STATE","deletedTasks","action","res","temp","length"],"mappings":"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","file":"static/js/main.67cbc0c5.chunk.js","sourcesContent":["const randomTaskActionTypes = {\r\n  UPDATE_TASK: \"UPDATE_TASK\",\r\n  RESTORE_TODOS: \"RESTORE_TODOS\",\r\n  TOGGLE_THEME: \"TOGGLE_THEME\",\r\n};\r\n\r\nexport default randomTaskActionTypes;\r\n","const {\r\n  default: randomTaskActionTypes,\r\n} = require(\"./random-task.action.types\");\r\n\r\nexport const updateTasks = (payload) => ({\r\n  type: randomTaskActionTypes.UPDATE_TASK,\r\n  payload,\r\n});\r\n\r\nexport const toggleTheme = () => ({\r\n  type: randomTaskActionTypes.TOGGLE_THEME,\r\n});\r\n\r\nexport const restoreTodos = () => ({\r\n  type: randomTaskActionTypes.RESTORE_TODOS,\r\n});\r\n","import { useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\n\r\nimport {\r\n  updateTasks,\r\n  restoreTodos,\r\n  toggleTheme,\r\n} from \"./redux/random-task/random-task.actions\";\r\n\r\n// ICONS\r\nimport NightsStayIcon from \"@material-ui/icons/NightsStay\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport DeleteForeverTwoToneIcon from \"@material-ui/icons/DeleteForeverTwoTone\";\r\nimport RestoreFromTrashIcon from \"@material-ui/icons/RestoreFromTrash\";\r\n\r\nfunction App({ tasks, updateTasks, restoreTodos, darkTheme, toggleTheme }) {\r\n  const [task, setTask] = useState(\"\");\r\n  const gotoTopRef = useRef();\r\n\r\n  const body = document.body;\r\n\r\n  const VISIBLE_GOTO_TOP_AT = 100;\r\n\r\n  body.addEventListener(\"scroll\", (e) => {\r\n    if (gotoTopRef.current) {\r\n      const visibility = getComputedStyle(gotoTopRef.current)[\"visibility\"];\r\n      if (body.scrollTop > VISIBLE_GOTO_TOP_AT && visibility === \"hidden\") {\r\n        gotoTopRef.current.style.visibility = \"visible\";\r\n      } else if (\r\n        body.scrollTop < VISIBLE_GOTO_TOP_AT &&\r\n        visibility === \"visible\"\r\n      ) {\r\n        gotoTopRef.current.style.visibility = \"hidden\";\r\n      }\r\n    }\r\n  });\r\n  const gotoTop = () => {\r\n    body.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={`app${darkTheme ? \" dark\" : \"\"}`}>\r\n      <header>\r\n        <form\r\n          id=\"task-inp-form\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            updateTasks({ task, operation: \"+\" });\r\n            document.querySelector(\"form\").reset();\r\n            document.querySelector(\".task-input\").blur();\r\n\r\n            // scroll to last\r\n            const height = body.scrollHeight;\r\n\r\n            body.scrollTo({\r\n              top: height + 50,\r\n              behavior: \"smooth\",\r\n            });\r\n          }}\r\n        >\r\n          <div className=\"inp-task\">\r\n            <input\r\n              onChange={(e) => setTask(e.target.value)}\r\n              type=\"input\"\r\n              className=\"task-input\"\r\n              placeholder=\"enter task\"\r\n            />\r\n            <span className=\"add-button\">\r\n              <AddIcon />\r\n            </span>\r\n          </div>\r\n          <input type=\"submit\" style={{ display: \"none\" }} />\r\n        </form>\r\n\r\n        <button onClick={restoreTodos} className=\"rem-def-btn restore-btn\">\r\n          <RestoreFromTrashIcon />\r\n        </button>\r\n        <button\r\n          className=\"rem-def-btn theme-change-button\"\r\n          onClick={toggleTheme}\r\n        >\r\n          {darkTheme ? <WbSunnyIcon /> : <NightsStayIcon />}\r\n        </button>\r\n      </header>\r\n\r\n      <ol className=\"output-tasks\">\r\n        {tasks.map((task, idx) => (\r\n          <li className=\"task-item\" key={idx}>\r\n            <span className=\"s-no\">{idx + 1}.</span>\r\n            <div className=\"about-task\">{task}</div>\r\n            <div\r\n              className=\"delete-task-button\"\r\n              onClick={() => updateTasks({ task, operation: \"-\" })}\r\n            >\r\n              <DeleteForeverTwoToneIcon />\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n\r\n      <button ref={gotoTopRef} onClick={gotoTop} className=\"goto-top\">\r\n        <ArrowUpwardIcon />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.randomTasks.tasks,\r\n  darkTheme: state.randomTasks.darkTheme,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateTasks: (payload) => dispatch(updateTasks(payload)),\r\n  restoreTodos: () => dispatch(restoreTodos()),\r\n  toggleTheme: () => dispatch(toggleTheme()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import storage from \"redux-persist/lib/storage\";\r\n// Error\r\n// const storage = require(\"redux-persist/lib/storage\");\r\n\r\nconst { combineReducers } = require(\"redux\");\r\n\r\nconst { persistReducer } = require(\"redux-persist\");\r\n\r\nconst {\r\n  default: randomTaskReducer,\r\n} = require(\"./random-task/random-task.reducer\");\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  whitelist: [\"randomTasks\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  randomTasks: randomTaskReducer,\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","import { createStore } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { store, persistor } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const manipulateTasks = (currentTasks, payload) => {\r\n  const { task: newTask, operation } = payload;\r\n  if (operation === \"+\") {\r\n    return [[...currentTasks, newTask]];\r\n  } else if (operation === \"-\") {\r\n    return [currentTasks.filter((task) => task !== newTask), currentTasks.filter((task) => task === newTask)];\r\n  }\r\n};\r\n","import { manipulateTasks } from \"./random-task.utils\";\r\n\r\nconst {\r\n  default: randomTaskActionTypes,\r\n} = require(\"./random-task.action.types\");\r\n\r\nconst INITIAL_STATE = {\r\n  tasks: [],\r\n  deletedTasks: [],\r\n  darkTheme: true,\r\n};\r\n\r\nconst randomTaskReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case randomTaskActionTypes.UPDATE_TASK:\r\n      const res = manipulateTasks(state.tasks, action.payload);\r\n\r\n      return {\r\n        ...state,\r\n        tasks: res[0],\r\n        ...(action.payload.operation === \"-\" && {\r\n          deletedTasks: [...state.deletedTasks, res[1]],\r\n        }),\r\n      };\r\n\r\n    case randomTaskActionTypes.RESTORE_TODOS:\r\n      const temp = state.deletedTasks.map((task) => task);\r\n      state.deletedTasks.length = 0;\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, ...temp],\r\n      };\r\n\r\n    case randomTaskActionTypes.TOGGLE_THEME:\r\n      return {\r\n        ...state,\r\n        darkTheme: !state.darkTheme,\r\n      };\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default randomTaskReducer;\r\n"],"sourceRoot":""}